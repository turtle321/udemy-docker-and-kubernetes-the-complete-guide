# NOTE: this file is indeed supposed to be in the root dir in order for Github to recognize it.

language: generic # In case of error: rakefile not found
sudo: required
services:
  - docker
env:
  global:
    # The SHA is used in the Docker Hub push and  when deploying
    # to Kubernetes, see `deploy.sh`.
    - SHA=$(git rev-parse HEAD)
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1

before_install:
  - cd ./section14-15-16-17/complex # Change dir because that is where the src is. Usually you don't need this.

  # Install Google Cloud SDK, kubectl and authorize it.
  - curl https://sdk.cloud.google.com | bash > /dev/null;
  - source $HOME/google-cloud-sdk/path.bash.inc
  - gcloud components update kubectl
  # Authorization. `service-account.json` is generated by my Google Cloud,
  # then encrypted using Travis CI CLI, then uploaded to my Travis CI.
  # Setup the encryption key used to encrypt `service-account.json`
  - openssl aes-256-cbc -K $encrypted_b1f39568936c_key -iv $encrypted_b1f39568936c_iv -in service-account.json.enc -out service-account.json -d
  - gcloud auth activate-service-account --key-file service-account.json
  # Google Cloud project configs.
  - gcloud config set project multi-k8s-254515
  - gcloud config set compute/zone europe-west6-a
  - gcloud container clusters get-credentials multi-cluster
  # Login in Docker CLI.
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
  # Build container.
  - docker build -t nimiq/react-test -f ./client/Dockerfile.dev ./client

script:
  # This is where to run all tests.
  # This one here is just an example, there is no actual
  # test run in react-test.
  # - docker run nimiq/react-test npm test -- --coverage
  - docker run -e CI=true nimiq/react-test npm test

after_success:
  # Docker builds.
  # Use 2 tags for each image: the classic lates plus the git SHA.
  # The sha is added in order to tell kubernetes to use an image
  # with a new tag.
  # If instead we used latest, kubernetes would think to already
  # have latest, even tho latest was updated.
  # In other words: kubernetes does not re-apply an image if
  # you push an updated version to Docker Hub. That's why you need
  # to use unique tags.
  # Note: $SHA is an anv var that we defined inside `.travis.yml`.
  - docker build -t nimiq/multi-client:latest -t nimiq/multi-client:$SHA -f ./client/Dockerfile ./client
  - docker build -t nimiq/multi-server:latest -t nimiq/multi-server:$SHA -f ./server/Dockerfile ./server
  - docker build -t nimiq/multi-worker:latest -t nimiq/multi-worker:$SHA -f ./worker/Dockerfile ./worker

  # Docker Hub push.
  - docker push nimiq/multi-client:latest
  - docker push nimiq/multi-server:latest
  - docker push nimiq/multi-worker:latest
  - docker push nimiq/multi-client:$SHA
  - docker push nimiq/multi-server:$SHA
  - docker push nimiq/multi-worker:$SHA

deploy:
  # There is no Google Cloud Kubernetes provider in Travis CI, so we need
  # to do it ourself in a separate script.
  provider: script
  script: bash ./deploy.sh
  on:
    branch: master
